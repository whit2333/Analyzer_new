*
*     Common block that contains the mapping of physical fastbus locations
*     to logical detector identification.
*
*     $Log: gen_decode_common.cmn,v $
*     Revision 1.4.24.7  2007/09/11 19:14:18  frw
*     fixed FPP related arrays and limits
*
*     Revision 1.4.24.6  2007/09/10 21:18:13  frw
*     fixed FPP related arrays and limits
*
*     Revision 1.4.24.5  2007/09/07 21:55:07  puckett
*     increased maxplanes, maxcounters to 999,changed range of index 4 of array g_decode_roc
*
*     Revision 1.4.24.4  2007/08/27 20:24:42  puckett
*     Increased "max planes" from 15 to 56
*
*     Revision 1.4.24.3  2007/08/22 19:09:31  frw
*     added FPP
*
*     Revision 1.5  4/2007  frw
*     added flag to identify module type in VME bins -- unused for FastBus
*
*     Revision 1.4.24.2  2007/06/04 15:11:23  puckett
*     changed hit array structure for trigger-related signals
*
*     Revision 1.4.24.1  2007/05/15 02:53:02  jones
*     Start to Bigcal code
*
*     Revision 1.4  1996/01/17 15:40:59  cdaq
*     (SAW) Change roc index in arrays to start at zero.
*     (JRA) Add structures needed to produce adc threshold setting files.
*
*     Revision 1.3  1994/10/20 12:26:44  cdaq
*     (JRA) Increate G_DECODE_MAXROCS from 8 to 9
*
* Revision 1.2  1994/04/05  14:31:10  cdaq
* Add g_decode_subaddbit for location in FB word of sub address
*
* Revision 1.1  1994/02/07  19:36:23  cdaq
* Initial revision
*
*%%   include 'gen_detectorids.par'
*
      integer G_DECODE_MAXWORDS                 ! Must exceed number of
      parameter (G_DECODE_MAXWORDS=10000)        ! installed FB channels
      integer G_DECODE_MAXROCS
      parameter (G_DECODE_MAXROCS=15)            ! Largest ROC # + 1
      integer G_DECODE_MAXSLOTS
      parameter (G_DECODE_MAXSLOTS=25)          ! # slots in a FB crate

      integer G_DECODE_MAXPLANES
      parameter (G_DECODE_MAXPLANES=99) 	! Largest plane #
      integer G_DECODE_MAXCOUNTERS
      parameter (G_DECODE_MAXCOUNTERS=999)	! Largest counter #
      integer G_DECODE_MAXSIGNALS
      parameter (G_DECODE_MAXSIGNALS=3) 	! Largest signal #

      integer*4 g_decode_slotpointer            ! Pointer into map arrays
      integer*4 g_decode_subaddcnt              ! Number of subadds per slot
      integer*4 g_decode_subaddbit              ! bit shift to get subadd
      integer*4 g_decode_modtyp                 ! flag to identify module type
      integer*4 g_decode_slotmask
      integer*4 g_decode_didmap
      integer*4 g_decode_planemap, g_decode_countermap
      integer*4 g_decode_sigtypmap
      integer*4 g_decode_nextpointer            ! Next free in map arrays
      integer*4 g_decode_roc
      common /UPCOMMON/
     $     g_decode_slotpointer(0:G_DECODE_MAXROCS, G_DECODE_MAXSLOTS),
     $     g_decode_subaddcnt(0:G_DECODE_MAXROCS,G_DECODE_MAXSLOTS),
     $     g_decode_subaddbit(0:G_DECODE_MAXROCS,G_DECODE_MAXSLOTS),
     $     g_decode_slotmask(0:G_DECODE_MAXROCS,G_DECODE_MAXSLOTS),
     $     g_decode_didmap(G_DECODE_MAXWORDS),
     $     g_decode_planemap(G_DECODE_MAXWORDS),
     $     g_decode_countermap(G_DECODE_MAXWORDS),
     $     g_decode_sigtypmap(G_DECODE_MAXWORDS),
     $     g_decode_nextpointer,
     $     g_decode_modtyp(0:G_DECODE_MAXROCS,G_DECODE_MAXSLOTS),
     $     g_decode_roc(0:MAXID,G_DECODE_MAXPLANES,
     $                  G_DECODE_MAXCOUNTERS,0:G_DECODE_MAXSIGNALS)

      integer*4 gmax_roc_with_adc
      integer*4 gmax_slot_with_adc
      integer*4 gnum_adc_channels
      parameter (gmax_roc_with_adc=12)
      parameter (gmax_slot_with_adc=22)
      parameter (gnum_adc_channels=64)

* use slot,roc so that g_threshold_readback(1,3,7) >>> thresholds(*) gives
* the thresholds(1-64) = the 64 thresholds in roc3,slot7.

      integer*4 g_threshold_readback(gnum_adc_channels,
     &             gmax_roc_with_adc,gmax_slot_with_adc)

      common/gen_threshold_check/
     &     g_threshold_readback

*     Local Variables:
*     mode: fortran
*     End:
